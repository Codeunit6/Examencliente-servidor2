<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class publicaciones2Seeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $unidad=["Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2","Unidad 2"];
        $titulo = ["Reconocer los conceptos de representacion distribuida, presentacion remota, logica o proceso distribuido, acceso a datos remotos y bases de datos distribuidas","Definir los conceptos de logica de acceso, presentacion y negocio de datos","Explicar el proceso de dise√±o de logica de acceso de datos, logica de presentacion de datos y logica de negocio o logica de aplicacion","Explicar el proceso de desarrollo de logica de acceso de datos, logica de representacion de datos y logica de negocio o logica de aplicacion","Definir concepto de nivel vinculado a programacion web","Explicar el proceso de planificacion en dos niveles","Explicar el proceso de planificacion en tres niveles","Explicar el proceso de planificacion multiniveles","Identificar problemas de actualizacion y mantenimiento de aplicaciones multinivel","Reconocer los conceptos de modelo, control y vista, en las arquitecturas cliente/servidor","Reconocer los conceptos de modelo controlador vista (MVC) en las arquitecturas cliente/servidor","Explicar el proceso de flujo de control a partir del MVC, en las arquitecturas Cliente/Servidor","Describir el desarrollo de software a partir del MVC, en las arquitecturas Cliente/Servidor","Definir el concepto de comunicacion orientada a conexion e interfaz de programacion de aplicaciones (API)","Explicar el proceso de comunicacion y configuracion orientada a conexion e interfaz de programacion de aplicaciones (API)","Definir el concepto de sockets","Explicar el proceso del uso de sockets en aplicaciones Cliente/Servidor"];
        $subtitulo =["Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor","Cliente-Servidor"];
        $autor =["Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez","Eduardo Antonio Mendez Sandoval","Fernando Brayan Mejia Gomez"];
        $fecha=["01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22","01/03/22"];
        $contenido=["<article class='mb-4'>
        <div class='container px-4 px-lg-5'>
            <div class='row gx-4 gx-lg-5 justify-content-center'>
                <div class='col-md-10 col-lg-8 col-xl-7'>
                    <h2 class='section-heading'>Reconocer los conceptos de representacion distribuida, presentacion remota, logica o proceso distribuido, acceso a datos remotos y bases de datos distribuidas</h2>
                    <p class='section-heading'>Representaci√≥n distribuida </p>
                    <p class='text-justify'>Sistemas cuyos componentes hardware y software, que est√°n en ordenadores conectados en red, se comunican y coordinan sus acciones mediante el paso de mensajes, para el logro de un objetivo. En todo sistema distribuido se establecen una o varias comunicaciones siguiendo un protocolo prefijado mediante un esquema cliente‚Äìservidor.</p>
                    <img class='img-fluid' src='assets/img/unidad2-1.jpg' alt='...' style='width: 100%' />
                    <p class='section-heading'>Representaci√≥n remota</p>
                    <p class='text-justify'>La l√≥gica de la aplicaci√≥n y la base de datos se encuentran en el servidor. El cliente recibe y formatea los datos para interactuar con el usuario.</p>
                    <p class='section-heading'>Representaci√≥n l√≥gicaa</p>
                    <p class='text-justify'>El cliente se encarga de la interacci√≥n con el usuario y de algunas funciones triviales de la aplicaci√≥n. Por ejemplo, controles de rango de campos, campos obligatorios, etc. Mientras que el resto de la aplicaci√≥n, junto con la base de datos, est√°n en el servidor.</p>
                    <p class='section-heading'>Acceso a datos remotos </p>
                    <p class='text-justify'>Este proceso se basa en la uni√≥n entre los servidores. Cuando la uni√≥n se establece entre dos servidores, el servidor que recibe por parte de alguno de sus usuarios una petici√≥n de ejecuci√≥n de una consulta sobre otro servidor transmite la consulta al servidor remoto.</p>
                    
                    <p></p>
                    <p></p>
                    <p></p>
                    <div class='row'>
                        <div class='col-sm'>
                            <div class='d-flex justify-content-end'>
                                <a class='btn btn-primary text-uppercase' href=\"unidad2-2\">Siguiente tema ‚Üí</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </article>","<article class='mb-4'>
    <div class='container px-4 px-lg-5'>
        <div class='row gx-4 gx-lg-5 justify-content-center'>
            <div class='col-md-10 col-lg-8 col-xl-7'>
                <h2 class='section-heading'>Definir los conceptos de logica de acceso, presentacion y negocio de datos</h2>
                <p class='section-heading'>Concepto de l√≥gica de acceso </p>
                <p class='text-justify'>El control de acceso l√≥gico es la principal l√≠nea de defensa para la mayor√≠a de los sistemas, permitiendo prevenir el ingreso de personas no autorizadas a su informaci√≥n. Para controlar el acceso se emplean 2 procesos: identificaci√≥n y autenticaci√≥n. Se denomina identificaci√≥n al momento en que el usuario se da a conocer en el sistema; y autenticaci√≥n a la verificaci√≥n que realiza el sistema sobre esa identificaci√≥n. </p>
                <p class='section-heading'>Negocio a datos </p>
                <p class='text-justify'>El proceso cliente/servidor no es una moda pasajera, sino que constituye un cambio fundamental en el sector inform√°tico y garantiza que no se est√° volviendo a las formas antiguas en la actividad comercial. Los mainframes han adquirido una nueva forma como servidores de empresa y las estaciones de trabajo se utilizan como puertas de entrada al universo en expansi√≥n de los servicios basados en red. </p>
                <img class='img-fluid' src='assets/img/unidad2-2.jpg' alt='...' style='width: 100%' />
                <p></p>
                <p></p>
                <p></p>
                <div class='row'>
                    <div class='col-sm'>
                        <div class='d-flex justify-content-end'>
                            <a class='btn btn-primary text-uppercase' href=\"unidad2-1\">ü†î Anterior tema</a>
                        </div>
                    </div>
                    <div class='col-sm'>
                        <div class='d-flex justify-content-end'>
                            <a class='btn btn-primary text-uppercase' href=\"unidad2-3\">Siguiente tema ‚Üí</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de dise√±o de logica de acceso de datos, logica de presentacion de datos y logica de negocio o logica de aplicacion</h2>
            <p class='section-heading'>Proceso de dise√±o de l√≥gica de acceso de datos</p>
            <p class='text-justify'>El dise√±o de una base de datos es un proceso que se gu√≠a por varios principios bien definidos, partiendo de un dominio del cual se obtendr√° un modelo conceptual, seguidamente un modelo l√≥gico, al cual se le debe aplicar normalizaci√≥n y finalmente obtener un modelo f√≠sico y poder implementarlo</p>
            <p class='section-heading'>L√≥gica de aplicaci√≥n</p>
            <p class='text-justify'>Las aplicaciones cliente/servidor normalmente distribuyen los componentes de la aplicaci√≥n de forma que la base de datos reside en el servidor, el interfaz de usuario reside en el cliente, y la l√≥gica de negocio puede residir tanto en el cliente, como en el servidor</p>
            <img class='img-fluid' src='assets/img/unidad2-3.png' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-4\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-5\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de desarrollo de logica de acceso de datos, logica de representacion de datos y logica de negocio o logica de aplicacion</h2>
            <p class='section-heading'>Proceso de desarrollo de l√≥gica de acceso a datos</p>
            <p class='text-justify'>Previamente a la fase de dise√±o l√≥gico, se debe elegir un tipo de base de datos. Es decir, no hay que escoger todav√≠a un SGBD concreto, sino que simplemente hay que seleccionar el tipo de base de datos que se quiere implementar. Es importante que quede claro que el tipo de base de datos determina el esquema de dise√±o l√≥gico. Una vez elegido el tipo de SGBD donde se quiere implementar la base de datos, ya se puede iniciar la fase del dise√±o l√≥gico. </p>
            <p class='section-heading'>Proceso de desarrollo de l√≥gica de aplicaci√≥n</p>
            <p class='text-justify'>Estos procesos gestionan la l√≥gica empresarial de la aplicaci√≥n y pueden acceder a los servicios de tercer nivel. La capa l√≥gica de la aplicaci√≥n es donde se produce la mayor parte del trabajo de proceso. Varios componentes de cliente pueden acceder simult√°neamente a los procesos de segundo nivel, por lo que esta capa l√≥gica de aplicaci√≥n debe gestionar sus propias transacciones. </p>
            <img class='img-fluid' src='assets/img/unidad2-4.png' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-3\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-5\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Definir concepto de nivel vinculado a programacion web</h2>
            <p class='section-heading'>Concepto de nivel vinculado a programaci√≥n web</p>
            <p class='text-justify'>Desarrollo web significa construir y mantener sitios web; es el trabajo que tiene lugar en un segundo plano y que permite que una web tenga una apariencia impecable, un funcionamiento r√°pido y un buen desempe√±o para permitir la mejor experiencia de usuario. Los desarrolladores web son como duendes con poderes: nunca los ves, pero son los que hacen que todo est√© bien y funcione de manera r√°pida y eficiente.</p>
            <img class='img-fluid' src='assets/img/unidad2-5.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-4\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-6\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de planificacion en dos niveles</h2>
            <p class='section-heading'>Proceso de planificaci√≥n en dos niveles </p>
            <p class='text-justify'>El esquema operativo de un planificador de dos niveles es como sigue: 
            Los criterios que podr√≠a utilizar el planificador de nivel superior para tomar sus decisiones son los que se indican a continuaci√≥n:
            </p>
            <ul>
                <li>Se carga en la memoria principal cierto subconjunto de los procesos ejecutables</li>
                <li>El planificador se restringe a ellos durante cierto tiempo.</li>
            </ul>
            <img class='img-fluid' src='assets/img/unidad2-6.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-5\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-7\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de planificacion en tres niveles</h2>
            <p class='section-heading'>Proceso de planificaci√≥n en tres niveles </p>
            <p class='text-justify'>Los tres niveles deben comunicarse entre s√≠. Abiertos, los protocolos est√°ndar y las API expuestas simplifican esta comunicaci√≥n. Puede escribir componentes de cliente en cualquier lenguaje de programaci√≥n, como por ejemplo Java o C++. Estos clientes se ejecutan en cualquier sistema operativo, hablando con la capa l√≥gica de la aplicaci√≥n. Las bases de datos del tercer nivel pueden ser de cualquier dise√±o, si la capa de aplicaci√≥n puede consultarlas y manipularlas. La clave de esta arquitectura es la capa l√≥gica de la aplicaci√≥n.</p>
            <img class='img-fluid' src='assets/img/unidad2-7.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-6\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-8\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de planificacion multiniveles</h2>
            <p class='section-heading'>Proceso de la planificaci√≥n multiniveles </p>
            <p class='text-justify'>La Planificaci√≥n de procesos en Minix se hace mediante colas multinivel sin realimentaci√≥n, habiendo un total de tres colas. La Cola de mayor prioridad se encarga de las tareas (TASK_Q), la siguiente en prioridad, se hace cargo de los servidores (SERVER_Q) y por √∫ltimo, la de menor prioridad, gestiona los procesos de usuario (USER_Q). Dentro de los niveles de tareas y servidores los procesos se ejecutan hasta que se bloquean.</p>
            <img class='img-fluid' src='assets/img/unidad2-8.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-7\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-9\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Identificar problemas de actualizacion y mantenimiento de aplicaciones multinivel</h2>
            <p class='section-heading'>Identificar problemas de actualizaci√≥n</p>
            <p class='text-justify'>Para identificar y resolver problemas relacionados con WSIF, puede utilizar los recursos est√°ndar de WebSphere Application Server rastreo y registro . Si encuentra un problema que cree que podr√≠a estar relacionado con WSIF, puede comprobar si hay mensajes de error en la consola administrativa de WebSphere Application Server y en el archivo stdout.log del servidor de aplicaciones. </p>
            <p class='text-justify'>Tambi√©n puede habilitar el rastreo de depuraci√≥n del servidor de aplicaciones para proporcionar un vuelco de excepciones detallado. Una lista de los mensajes del sistema de tiempo de ejecuci√≥n WSIF, con detalles de lo que significa cada mensaje, se proporciona en Mensajes WSIF (Web Services Invocation Framework). Una lista de las principales restricciones conocidas que se aplican al utilizar WSIF se proporciona en WSIF-Restricciones conocidas. </p>
            <img class='img-fluid' src='assets/img/unidad2-9.jpg' alt='...' style='width: 100%' />
            <p class='section-heading'>Mantenimiento de aplicaciones de multinivel</p>
            <p class='text-justify'>La aplicaci√≥n reside en el cliente mientras que la base de datos se encuentra en el servidor. En este tipo de aplicaciones el peso del c√°lculo recae en el cliente, mientras que el servidor hace la parte menos pesada, y eso que los clientes suelen ser m√°quinas menos potentes que los servidores. Adem√°s, est√° el problema de la actualizaci√≥n y el mantenimiento de las aplicaciones, ya que las modificaciones a la misma han de ser trasladada a todos los clientes. 
Para solucionar estos problemas se ha desarrollado el concepto de arquitecturas de tres niveles: interfaz de presentaci√≥n, l√≥gica de la aplicaci√≥n y los datos. La capa intermedia es el c√≥digo que el usuario invoca para recuperar los datos deseados. La capa de presentaci√≥n recibe los datos y los formatea para mostrarlos adecuadamente. Esta divisi√≥n entre la capa de presentaci√≥n y la de la l√≥gica permite una gran flexibilidad a la hora de construir aplicaciones, ya que se pueden tener m√∫ltiples interfaces sin cambiar la l√≥gica de la aplicaci√≥n. 
La tercera capa consiste en los datos que gestiona la aplicaci√≥n. Estos datos pueden ser cualquier fuente de informaci√≥n como una base de datos o documentos XML. Convertir un sistema de tres niveles a otro multinivel es f√°cil ya que consiste en extender la capa intermedia permitiendo que convivan m√∫ltiples aplicaciones en lugar de una sola 
</p>
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-8\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-10\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Reconocer los conceptos de modelo, control y vista, en las arquitecturas cliente/servidor</h2>
            <p class='section-heading'>Concepto de modelo</p>
            <p class='text-justify'>Los modelos son uno de los componentes principales de las aplicaciones desarrolladas bajo el patr√≥n MVC, que tienen la responsabilidad de acceder a los datos, modificarlos, etc. En el patr√≥n adem√°s los modelos mantienen lo que se llama la l√≥gica de negocio, que son las reglas que deben cumplirse para trabajar con los datos. Por tanto, el tipo de acciones que le vamos a solicitar a un modelo es, por ejemplo, obtener datos, insertarlos, modificarlos, etc. En las operaciones que modifiquen los datos adem√°s se tendr√° que realizar cierta validaci√≥n de esos datos, para asegurarnos que tienen la forma que es necesaria antes de guardarlos. </p>
            <img class='img-fluid' src='assets/img/unidad2-10.jpg' alt='...' style='width: 100%' />
            <p class='section-heading'>Concepto de controlador </p>
            <p class='text-justify'>Aunque suponemos que todos los lectores deben tener unas nociones b√°sicas generales sobre el concepto de controlador, cabe aclarar que √©stos son una de las piezas que, junto con los modelos y las vistas, forman parte del patr√≥n MVC. En Laravel, como en cualquier otro de los frameworks PHP populares, son una importante parte de las aplicaciones. Su funci√≥n es la de definir el c√≥digo a ejecutar como comportamiento frente a una acci√≥n solicitada dentro de la aplicaci√≥n. Generalmente para poder desempe√±ar su labor se apoyan en los modelos y las vistas. El controlador sabe qu√© m√©todos del modelo debe invocar, ya sea para actualizar cierta informaci√≥n o para obtener ciertos datos, as√≠ como las vistas que deben presentar la informaci√≥n como respuesta al usuario, despu√©s de la realizaci√≥n de las acciones necesarias. </p>
            <p class='section-heading'>Concepto de vista </p>
            <p class='text-justify'>Como dec√≠amos, la mayor√≠a seguro entender√° este concepto, no obstante, vamos a exponerlo r√°pidamente para aquel que no sepa de qu√© estamos hablando. Las vistas son una de las capas que tiene el sistema MVC, que trata de la separaci√≥n del c√≥digo seg√∫n sus responsabilidades. En este caso, las vistas mantienen el c√≥digo de lo que ser√≠a la capa de presentaci√≥n. 
Como capa de presentaci√≥n, las vistas se encargan de realizar la salida de la aplicaci√≥n que generalmente en el caso de PHP ser√° c√≥digo HTML. Por tanto, una vista ser√° un archivo PHP que contendr√° mayoritariamente c√≥digo HTML, que se enviar√° al navegador para que √©ste renderice la salida para el usuario. 
</p>
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-9\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-11\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Reconocer los conceptos de modelo controlador vista (MVC) en las arquitecturas cliente/servidor</h2>
            <p class='section-heading'>MVC (modelo, vista, controlador) </p>
            <p class='text-justify'>Es un patr√≥n arquitect√≥nico de software que separa una aplicaci√≥n en tres capas descritas como su acr√≥nimo lo indica. Laravel, as√≠ como la mayor√≠a de frameworks en PHP implementan este patr√≥n de dise√±o en donde cada capa maneja un aspecto de la aplicaci√≥n. Pero antes de ver c√≥mo Laravel est√° dise√±ado para implementar este patr√≥n de software, vamos a tratar de dejar este concepto un poco m√°s claro definiendo cada una de sus partes.</p>
            <img class='img-fluid' src='assets/img/unidad2-11.png' alt='...' style='width: 100%' />
            <p class='section-heading'>Modelo</p>
            <p class='text-justify'>Hace referencia a la estructura de datos de la aplicaci√≥n. Los datos pueden ser transferidos desde la base de datos, una clase, un servicio, u otros, directamente a la vista o ser transformados en el controlador para ser actualizados nuevamente al origen.</p>
            <p class='section-heading'>Vista</p>
            <p class='text-justify'>Es la representaci√≥n de la informaci√≥n en una interfaz de usuario. Por lo general en interfaces no est√°ticas se representan los datos que vienen directamente del modelo o estos son transformados en un proceso intermedio en el controlador. En vistas est√°ticas por lo general no hace falta que las vistas sean renderizadas con datos enviados del controlador.</p>
            <p class='section-heading'>Controlador</p>
            <p class='text-justify'>Es el lugar en donde se implementa la l√≥gica de la aplicaci√≥n, los procedimientos, algoritmos y rutinas que hacen que funcione el software. Act√∫a como interfaz entre los componentes de modelo y vista aplicando las transformaciones y l√≥gica necesarias.</p>
            
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-10\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-12\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de flujo de control a partir del MVC, en las arquitecturas Cliente/Servidor</h2>
            <p class='section-heading'>Proceso de flujo de control a partir del MVC</p>
            <ul>
                <li>1.	El usuario interact√∫a con la interfaz de usuario de alguna forma (por ejemplo, el usuario pulsa un bot√≥n, enlace, etc.)</li>
                <li>2.	El controlador recibe (por parte de los objetos de la interfaz-vista) la notificaci√≥n de la acci√≥n solicitada por el usuario. El controlador gestiona el evento que llega, frecuentemente a trav√©s de un gestor de eventos (handler) o callback.</li>
                <li>3.	El controlador accede al modelo, actualiz√°ndolo, posiblemente modific√°ndolo de forma adecuada a la acci√≥n solicitada por el usuario (por ejemplo, el controlador actualiza el carro de la compra del usuario). Los controladores complejos est√°n a menudo estructurados usando un patr√≥n de comando que encapsula las acciones y simplifica su extensi√≥n.</li>
                <li>4.	El controlador delega a los objetos de la vista la tarea de desplegar la interfaz de usuario. La vista obtiene sus datos del modelo para generar la interfaz apropiada para el usuario donde se refleja los cambios en el modelo (por ejemplo, produce un listado del contenido del carro de la compra). El modelo no debe tener conocimiento directo sobre la vista. Sin embargo, se podr√≠a utilizar el patr√≥n Observador para proveer cierta indirecci√≥n entre el modelo y la vista, permitiendo al modelo notificar a los interesados de cualquier cambio. Un objeto vista puede registrarse con el modelo y esperar a los cambios, pero aun as√≠ el modelo en s√≠ mismo sigue sin saber nada de la vista. El controlador no pasa objetos de dominio (el modelo) a la vista, aunque puede dar la orden a la vista para que se actualice. Nota: En algunas implementaciones la vista no tiene acceso directo al modelo, dejando que el controlador env√≠e los datos del modelo a la vista.</li>
                <li>5.	La interfaz de usuario espera nuevas interacciones del usuario, comenzando el ciclo nuevamente.</li>
            </ul>
            <img class='img-fluid' src='assets/img/unidad2-12.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-11\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-13\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Describir el desarrollo de software a partir del MVC, en las arquitecturas cliente/servidor</h2>
            <p class='text-justify'>Modelo Vista Controlador (MVC) es un estilo de arquitectura de software que separa los datos de una aplicaci√≥n, la interfaz de usuario, y la l√≥gica de control en tres componentes distintos.
Se trata de un modelo muy maduro y que ha demostrado su validez a lo largo de los a√±os en todo tipo de aplicaciones, y sobre multitud de lenguajes y plataformas de desarrollo.
</p>
            <ul>
                <li>El Modelo que contiene una representaci√≥n de los datos que maneja el sistema, su l√≥gica de negocio, y sus mecanismos de persistencia.</li>
                <li>La Vista, o interfaz de usuario, que compone la informaci√≥n que se env√≠a al cliente y los mecanismos interacci√≥n con √©ste.</li>
                <li>El Controlador, que act√∫a como intermediario entre el Modelo y la Vista, gestionando el flujo de informaci√≥n entre ellos y las transformaciones para adaptar los datos a las necesidades de cada uno</li>
            </ul>
            <p class='text-justify'>El modelo es el responsable de:</p>
            <ul>
                <li>Acceder a la capa de almacenamiento de datos. Lo ideal es que el modelo sea independiente del sistema de almacenamiento.</li>
                <li>Define las reglas de negocio (la funcionalidad del sistema). Un ejemplo de regla puede ser: Si la mercanc√≠a pedida no est√° en el almac√©n, consultar el tiempo de entrega est√°ndar del proveedor.</li>
                <li>Lleva un registro de las vistas y controladores del sistema.</li>
                <li>Si estamos ante un modelo activo, notificar√° a las vistas los cambios que en los datos pueda producir un agente externo (por ejemplo, un fichero por lotes que actualiza los datos, un temporizador que desencadena una inserci√≥n, etc.).</li>
            </ul>
            <img class='img-fluid' src='assets/img/unidad2-13.png' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-12\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-14\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Definir el concepto de comunicacion orientada a conexion e interfaz de programacion de aplicaciones (API)</h2>
            <p class='section-heading'>Concepto de comunicaci√≥n orientada a conexi√≥n</p>
            <p class='text-justify'>La comunicaci√≥n se puede establecer de dos maneras entre dos o m√°s dispositivos que est√°n orientados a la conexi√≥n y sin conexi√≥n. Las capas de red pueden ofrecer estos dos tipos diferentes de servicios a su capa predecesora para transferir datos. Los servicios orientados a la conexi√≥n implican el establecimiento y la terminaci√≥n de la conexi√≥n, mientras que los servicios sin conexi√≥n no requieren ning√∫n proceso de creaci√≥n y terminaci√≥n de la conexi√≥n para transferir datos.
Otra diferencia entre los servicios orientados a la conexi√≥n y los servicios sin conexi√≥n es que la comunicaci√≥n orientada a la conexi√≥n usa un flujo de datos y es vulnerable a fallas del enrutador, mientras que la comunicaci√≥n sin conexi√≥n usa mensajes y es robusta a la falla del enrutador
</p>
<p class='section-heading'>Concepto interfaz de comunicaci√≥n de aplicaciones </p>
            <p class='text-justify'>Una interfaz de programaci√≥n de aplicaciones (API) es un c√≥digo que permite que dos programas de software se comuniquen entre s√≠.
La API define la forma correcta para que un desarrollador escriba un programa que solicite servicios de un sistema operativo (SO) u otra aplicaci√≥n. Las API se implementan mediante llamadas a funciones compuestas de verbos y sustantivos. La sintaxis requerida se describe en la documentaci√≥n de la aplicaci√≥n a la que se llama.
</p>
            
            <img class='img-fluid' src='assets/img/unidad2-14.png' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-13\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-15\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso de comunicacion y configuracion orientada a conexion e interfaz de programacion de aplicaciones (API)</h2>
            <p class='section-heading'>Proceso de comunicaci√≥n </p>
            <p class='text-justify'>Los procesos de las aplicaciones se ejecutan en los servidores. Un √∫nico servidor puede ejecutar varios procesos de aplicaciones al mismo tiempo. Estos procesos esperan hasta que el cliente inicia comunicaci√≥n con una solicitud de informaci√≥n u otros servicios.
Cada proceso de aplicaci√≥n que se ejecuta en el servidor se configura para utilizar un n√∫mero de puerto, ya sea predeterminado o de forma manual por el administrador del sistema. Un servidor individual no puede tener dos servicios asignados al mismo n√∫mero de puerto dentro de los mismos servicios de la capa de transporte.
</p>
<p class='section-heading'>Configuraci√≥n orientada a conexi√≥n </p>
            <p class='text-justify'>TCP es un protocolo orientado a conexi√≥n. No hay relaciones maestro/esclavo. Las aplicaciones, sin embargo, utilizan un modelo cliente/servidor en las comunicaciones. 
Un servidor es una aplicaci√≥n que ofrece un servicio a usuarios de Internet; un cliente es el que pide ese servicio. Una aplicaci√≥n consta de una parte de servidor y una de cliente, que se pueden ejecutar en el mismo o en diferentes sistemas. 
Los usuarios invocan la parte cliente de la aplicaci√≥n, que construye una solicitud para ese servicio y se la env√≠a al servidor de la aplicaci√≥n que usa TCP/IP como transporte. 
El servidor es un programa que recibe una solicitud, realiza el servicio requerido y devuelve los resultados en forma de una respuesta. Generalmente un servidor puede tratar m√∫ltiples peticiones (m√∫ltiples clientes) al mismo tiempo. 
</p>
            
            <img class='img-fluid' src='assets/img/unidad2-15.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-14\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-16\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Definir el concepto de sockets</h2>
            <p class='text-justify'>Un socket, es un m√©todo para la comunicaci√≥n entre un programa del cliente y un programa del servidor en una red. Un socket se define como el punto final en una conexi√≥n. Los sockets se crean y se utilizan con un sistema de peticiones o de llamadas de funci√≥n a veces llamados interfaz de programaci√≥n de aplicaci√≥n de sockets (API, application programming interfaz). 
Un socket es tambi√©n una direcci√≥n de Internet, combinando una direcci√≥n IP (la direcci√≥n num√©rica √∫nica de cuatro partes que identifica a un ordenador particular en Internet) y un n√∫mero de puerto.
</p>

            
            <img class='img-fluid' src='assets/img/unidad2-16.png' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-16\">ü†î Anterior tema</a>
                    </div>
                </div>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-17\">Siguiente tema ‚Üí</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>","<article class='mb-4'>
<div class='container px-4 px-lg-5'>
    <div class='row gx-4 gx-lg-5 justify-content-center'>
        <div class='col-md-10 col-lg-8 col-xl-7'>
            <h2 class='section-heading'>Explicar el proceso del uso de sockets en aplicaciones Cliente/Servidor</h2>
            <p class='text-justify'>Los sockets permiten implementar una arquitectura cliente-servidor o peer to peer. La comunicaci√≥n debe ser iniciada por uno de los programas que se denomina programa cliente. El segundo programa espera a que otro inicie la comunicaci√≥n, por este motivo se denomina programa servidor. </p>
            <p class='text-justify'>Un socket es un proceso o hilo existente en la m√°quina cliente y en la m√°quina servidora, que sirve en √∫ltima instancia para que el programa servidor y el cliente lean y escriban la informaci√≥n. Esta informaci√≥n ser√° la transmitida por las diferentes capas de red. 
Cuando un cliente conecta con el servidor se crea un nuevo socket, de esta forma, el servidor puede seguir esperando conexiones en el socket principal y comunicarse con el cliente conectado, de igual manera se establece un socket en el cliente en un puerto local. 
</p>
            <p class='text-justify'>Una aplicaci√≥n servidor normalmente escucha por un puerto espec√≠fico esperando una petici√≥n de conexi√≥n de un cliente, una vez que se recibe, el cliente y el servidor se conectan de forma que les sea posible comunicarse entre ambos. Durante este proceso, el cliente es asignado a un n√∫mero de puerto, mediante el cual env√≠a peticiones al servidor y recibe de este las respuestas correspondientes. 
Similarmente, el servidor obtiene un nuevo n√∫mero de puerto local que le servir√° para poder continuar escuchando cada petici√≥n de conexi√≥n del puerto original. De igual forma une un socket a este puerto local. 
</p>

            
            <img class='img-fluid' src='assets/img/unidad2-17.jpg' alt='...' style='width: 100%' />
            <p></p>
            <p></p>
            <p></p>
            <div class='row'>
                <div class='col-sm'>
                    <div class='d-flex justify-content-end'>
                        <a class='btn btn-primary text-uppercase' href=\"unidad2-16\">ü†î Anterior tema</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</article>"];
        for($i=0; $i<17; $i++) {
            DB::table('unidad2')->insert([
                'unidad'=>$unidad[$i],
                'titulo'=>$titulo[$i],
                'subtitulo'=>$subtitulo[$i],
                'autor'=>$autor[$i],
                'fecha'=>$fecha[$i],
                'contenido'=>$contenido[$i],
                'created_at'=>date('Y-m-d H:i:s'),
                'updated_at'=>date('Y-m-d H:i:s'),
            ]);
        }
    }
}
